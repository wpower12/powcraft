/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/cubebot.js":
/*!************************!*\
  !*** ./src/cubebot.js ***!
  \************************/
/***/ (() => {

eval("MONO_IDS = {\n\t'W': {1: 'm-r1c1', 2: 'm-r2c1', 3: 'm-r3c1', 4: 'm-r4c1', 5: 'm-r5c1', 6: 'm-r6c1',  7: 'm-r7c1',  'L': 'm-r8c1'},\t\n\t'G': {1: 'm-r1c2', 2: 'm-r2c2', 3: 'm-r3c2', 4: 'm-r4c2', 5: 'm-r5c2', 6: 'm-r6c2',  7: 'm-r7c2',  'L': 'm-r8c2'},\n\t'R': {1: 'm-r1c3', 2: 'm-r2c3', 3: 'm-r3c3', 4: 'm-r4c3', 5: 'm-r5c3', 6: 'm-r6c3',  7: 'm-r7c3',  'L': 'm-r8c3'},\n\t'U': {1: 'm-r1c4', 2: 'm-r2c4', 3: 'm-r3c4', 4: 'm-r4c4', 5: 'm-r5c4', 6: 'm-r6c4',  7: 'm-r7c4',  'L': 'm-r8c4'},\n\t'B': {1: 'm-r1c5', 2: 'm-r2c5', 3: 'm-r3c5', 4: 'm-r4c5', 5: 'm-r5c5', 6: 'm-r6c5',  7: 'm-r7c5',  'L': 'm-r8c5'},\n\t'C': {1: 'm-r1c6', 2: 'm-r2c6', 3: 'm-r3c6', 4: 'm-r4c6', 5: 'm-r5c6', 6: 'm-r6c6',  7: 'm-r7c6',  'L': 'm-r8c6'}\n};\n\nDUAL_IDS = {\n\t'WG': {1: 'd1-r1c1', 2: 'd1-r2c1', 3: 'd1-r3c1', 4: 'd1-r4c1', 5: 'd1-r5c1', 6: 'd1-r6c1',  7: 'd1-r7c1',  'L': 'd1-r8c1',},\t\n\t'WR': {1: 'd1-r1c2', 2: 'd1-r2c2', 3: 'd1-r3c2', 4: 'd1-r4c2', 5: 'd1-r5c2', 6: 'd1-r6c2',  7: 'd1-r7c2',  'L': 'd1-r8c2',},\n\t'WU': {1: 'd1-r1c3', 2: 'd1-r2c3', 3: 'd1-r3c3', 4: 'd1-r4c3', 5: 'd1-r5c3', 6: 'd1-r6c3',  7: 'd1-r7c3',  'L': 'd1-r8c3',},\n\t'WB': {1: 'd1-r1c4', 2: 'd1-r2c4', 3: 'd1-r3c4', 4: 'd1-r4c4', 5: 'd1-r5c4', 6: 'd1-r6c4',  7: 'd1-r7c4',  'L': 'd1-r8c4',},\n\t'GR': {1: 'd1-r1c5', 2: 'd1-r2c5', 3: 'd1-r3c5', 4: 'd1-r4c5', 5: 'd1-r5c5', 6: 'd1-r6c5',  7: 'd1-r7c5',  'L': 'd1-r8c5',},\n\t'GU': {1: 'd2-r1c1', 2: 'd2-r2c1', 3: 'd2-r3c1', 4: 'd2-r4c1', 5: 'd2-r5c1', 6: 'd2-r6c1',  7: 'd2-r7c1',  'L': 'd2-r8c1',},\t\n\t'GB': {1: 'd2-r1c2', 2: 'd2-r2c2', 3: 'd2-r3c2', 4: 'd2-r4c2', 5: 'd2-r5c2', 6: 'd2-r6c2',  7: 'd2-r7c2',  'L': 'd2-r8c2',},\n\t'RU': {1: 'd2-r1c3', 2: 'd2-r2c3', 3: 'd2-r3c3', 4: 'd2-r4c3', 5: 'd2-r5c3', 6: 'd2-r6c3',  7: 'd2-r7c3',  'L': 'd2-r8c3',},\n\t'RB': {1: 'd2-r1c4', 2: 'd2-r2c4', 3: 'd2-r3c4', 4: 'd2-r4c4', 5: 'd2-r5c4', 6: 'd2-r6c4',  7: 'd2-r7c4',  'L': 'd2-r8c4',},\n\t'UB': {1: 'd2-r1c5', 2: 'd2-r2c5', 3: 'd2-r3c5', 4: 'd2-r4c5', 5: 'd2-r5c5', 6: 'd2-r6c5',  7: 'd2-r7c5',  'L': 'd2-r8c5',}\n}\n\nTOTAL_IDS = {\n\t'W': \"tW\",'G': \"tG\",'R': \"tR\",'U': \"tU\",'B': \"tB\", 'C': 'tC',\n\t'WG': \"tWG\", 'WR': \"tWR\",'WU': \"tWU\",'WB': \"tWB\",'GR': \"tGR\",\n\t'GU': \"tGU\", 'GB': \"tGB\",'RU': \"tRU\",'RB': \"tRB\",'UB': \"tUB\"\n}\n\nfunction stringsFromIds(id_obj){\n\tvar strs = []\n\tfor (var key in id_obj){\n\t\t// console.log(MONO_IDS[key][1]);\n\t\tfor(var cmc in id_obj[key]){\n\t\t\t// get the value and add that many strings to the string list\n\t\t\tvar input = document.getElementById(id_obj[key][cmc]);\n\t\t\tvar num_copies = parseInt(input.value);\n\t\t\tfor (var i = 0; i < num_copies; i++) {\n\t\t\t\tstrs.push(\"\"+key+\"_\"+cmc);\n\t\t\t}\n\t\t}\n\t}\n\treturn strs;\n}\n\n\n// https://javascript.info/task/shuffle\nfunction fyShuffle(array){\n  for (let i = array.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1)); \n    [array[i], array[j]] = [array[j], array[i]];\n  }\n}\n\n\nfunction condenseStrings(player_strs){\n\tvar full_strs = [];\n\tvar set_obj = stringsToCounts(player_strs)\n\tfor (var card_str in set_obj) {\n\t\tfull_strs.push(`${card_str}x${set_obj[card_str]}`);\n\t}\n\treturn full_strs.sort();\n}\n\n\nfunction stringsToCounts(player_strs){\n\tvar set_obj = {};\n\tfor (var card_str in player_strs) {\n\t\tcard_str = player_strs[card_str];\n\t\tif(set_obj.hasOwnProperty(card_str)){\n\t\t\tset_obj[card_str]++;\n\t\t} else {\n\t\t\tset_obj[card_str] = 1;\n\t\t}\n\t}\n\treturn set_obj;\n}\n\n\t\nfunction processKeywords(player_strings){\n\t// Get all the keyword stings from the textarea element\n\n\t// Create the empyty 'set obejct' like you did for the other func.\n\t// but now we have 1 for each player\n\tvar player_kws = [];\n\tvar player_color_counts = [];\n\tfor (var i = 0; i < player_strings.length; i++) {\n\t\tplayer_kws.push({});\n\t\tplayer_color_counts.push({});\n\t}\n\n\tvar kw_text = document.getElementById(\"keyword-text\");\n\tvar kws = kw_text.value.split(\"\\n\");\n\tconsole.log(kws);\n\tfor (var i = 0; i < kws.length; i++) {\n\t\tvar kw = kws[i].split(', ');\n\t\tconsole.log(kw);\n\t\t// init player counters\n\t\tfor (var c = 0; c < player_color_counts.length; c++) {\n\t\t\tplayer_color_counts[c][kw[2]] = countPlayerColor(player_strings, c, kw[2]);\n\t\t}\n\n\t\tvar num_copies = parseInt(kw[1]);\n\t\tvar r_id;\n\t\tfor(var c = 0; c < num_copies; c++){\n\t\t\tr_id = getRandomInt(player_kws.length);\n\t\t\twhile(player_color_counts[r_id][kw[0]] == 0){\n\t\t\t\tr_id = getRandomInt(player_kws.length);\n\t\t\t}\n\t\t\tif(player_kws[r_id].hasOwnProperty(kw[0])){\n\t\t\t\tplayer_kws[r_id][kw[0]]++;\n\t\t\t} else {\n\t\t\t\tplayer_kws[r_id][kw[0]] = 1;\n\t\t\t}\n\t\t\tplayer_color_counts[r_id][kw[2]]--;\n\t\t}\n\n\n\t}\n\treturn player_kws;\n}\n\n\nfunction countPlayerColor(player_strings, p_id, color){\n\tvar count = 0;\n\tfor(var c_str in player_strings[p_id]){\n\t\tif(c_str.includes(color)){\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\nfunction getRandomInt(max) {\n  return Math.floor(Math.random() * max);\n}\n\nfunction generate(){\n\tvar strings = [];\n\n\tstrings = strings.concat(stringsFromIds(MONO_IDS));\n\tstrings = strings.concat(stringsFromIds(DUAL_IDS));\n\n\tfyShuffle(strings);\n\n\tvar n_players = parseInt(document.getElementById('num-players').value);\n\tvar cards_per = strings.length / n_players;\n\n\tvar player_strings = [];\n\tfor (var i = 0; i < n_players; i++) {\n\t\tplayer_strings.push(strings.slice(i*cards_per, (i+1)*cards_per));\n\t\tplayer_strings[i] = condenseStrings(player_strings[i]);\n\t}\n\n\tconsole.log(player_strings);\n\n\tvar player_keywords = processKeywords(player_strings);\n\tconsole.log(player_keywords);\n\n\tvar cb_text = \"\";\n\tfor(var player in player_strings){\n\t\tvar count_strings = player_strings[player];\n\t\tcb_text += `player ${player}: \\n`;\n\n\t\tfor(var kw in player_keywords[player]){\n\t\t\tvar n = player_keywords[player][kw];\n\t\t\t// console.log()\n\t\t\tcb_text += `${kw} x ${n}, `;\n\t\t} \n\t\tcb_text = cb_text.substring(0, cb_text.length-2);\n\t\tcb_text += \"\\n\";\n\n\t\tfor(var str in count_strings){\n\t\t\tcb_text += `${count_strings[str]}\\n`;\n\t\t}\n\t}\n\tconsole.log(cb_text);\n\n\tdocument.getElementById(\"text-out\").innerHTML = cb_text;\n\n\tnavigator.clipboard.writeText(player_strings);\n}\n\nfunction updateStats(){\n\tvar full_total = 0;\n\tfor (var key in TOTAL_IDS){\n\t\tvar total_el = document.getElementById(TOTAL_IDS[key]);\n\t\tfull_total += parseInt(total_el.innerHTML);\n\t}\n\tdocument.getElementById(\"total_cards\").innerHTML = \"\"+full_total;\n\n\tvar n_players = parseInt(document.getElementById(\"num-players\").value);\n\tdocument.getElementById(\"cards_per_player\").innerHTML = \"\"+Math.floor((full_total/n_players));\n}\n\nfunction makeUpdateTotals(cell_ids, total_id){\n\tfunction updateTotals() {\n\t\tvar total = 0;\n\t\tfor(var cell_id in cell_ids){\n\t\t\ttotal += parseInt(document.getElementById(cell_ids[cell_id]).value);\n\t\t}\n\t\tdocument.getElementById(total_id).innerHTML = \"\"+total;\n\t\tconsole.log(\"updated \"+total_id+\" \"+total);\n\t\tupdateStats();\n\t}\n\treturn updateTotals;\n}\n\nfunction attachUpdateTotalMethods(id_obj){\n\tfor (var key in id_obj){\n\t\t// console.log(MONO_IDS[key][1]);\n\t\tfor(var cmc in id_obj[key]){\n\t\t\t// get the value and add that many strings to the string list\n\t\t\tvar input = document.getElementById(id_obj[key][cmc]);\n\t\t\tinput.onchange = makeUpdateTotals(id_obj[key], TOTAL_IDS[key]);\n\t\t\tinput.onchange();\n\t\t}\n\n\t}\n}\n\nattachUpdateTotalMethods(MONO_IDS);\nattachUpdateTotalMethods(DUAL_IDS);\n\ndocument.getElementById(\"process\").onclick = generate;\ndocument.getElementById(\"num-players\").onchange = updateStats;\n\n//# sourceURL=webpack://cubebotjs/./src/cubebot.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/cubebot.js"]();
/******/ 	
/******/ })()
;